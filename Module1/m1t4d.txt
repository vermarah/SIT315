// C++ code
//

//will give output on buzzer
int white_sensor = 2;                //setting up the pins for the sensors
int yellow_sensor = 3;                   //will give output on led
int blue_sensor = 4;

int white_led_pin = 13;
int yellow_led_pin = 12;
int blue_led_pin = 11;

int initial_state1 = LOW;
int initial_state2 = LOW;
int initial_state3 = LOW;
int buzz_pin = 7;

void setup()
{
   
  pinMode(white_led_pin, OUTPUT);            //setting up the output/input pins for the sensors
  pinMode(white_sensor, INPUT_PULLUP);
  pinMode(yellow_led_pin, OUTPUT);
  pinMode(yellow_sensor, INPUT_PULLUP);
  pinMode(blue_led_pin, OUTPUT);
  pinMode(blue_sensor, INPUT_PULLUP);
  
  pinMode(buzz_pin, OUTPUT);
  noInterrupts();
  
  TCCR1A = 0;       //Clearing default registers
  TCCR1B = 0;
  TCNT1 = 0;
  
  //(16000000 / (prescaler * desired interrupt frequency)) - 1
  // 5 Hz (16000000/(1024*(3124+1)))
  OCR1A = 3124;
  // CTC
  TCCR1B |= (1 << WGM12);
  // Prescaler 1024
  TCCR1B |= (1 << CS12) | (0 << CS11) | (1 << CS10);
  
  TIMSK1 |= (1 << OCIE1A);     //enabling timer compare interrupt
  interrupts();
  
  PCICR |= 0b00000100;  //Enabling port D interrupts
  PCMSK2 |=0b00010000;
  
  attachInterrupt(digitalPinToInterrupt(2), func2, CHANGE);
  attachInterrupt(digitalPinToInterrupt(3), func3, CHANGE);
  
  Serial.begin(9600);
}

void loop()
{
  	/*
  	digitalWrite(11, state1);
  	digitalWrite(13, state2);
  	digitalWrite(12, state3);
	*/
              //assigning the values in loop
}

void func2()
{
    initial_state2=!initial_state2;
    Serial.println("White LED ON");
}

void func3()
{
    initial_state3=!initial_state3;
    Serial.println("Yellow LED ON");
}


ISR(PCINT2_vect)
{
    blue_led_pin = PIND & B00010000;
    Serial.println("Blue LED ON");
}

ISR(TIMER1_COMPA_vect)
{
  digitalWrite(buzz_pin,digitalRead(buzz_pin)^1);
  buzz_pin&&Serial.println("buzzzzz");
}
